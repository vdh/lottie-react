{"version":3,"sources":["webpack:///../docs/components/Lottie/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---docs-components-lottie-readme-mdx-937de8dcdf6cbd043336.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/Gamote/lottie-react/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from \"docz\";\nimport LottieExamples from \"./LottieExamples\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"lottie\"\n    }}>{`Lottie`}</h1>\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h2>\n    <LottieExamples mdxType=\"LottieExamples\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import Lottie from \"lottie-react\";\nimport groovyWalkAnimation from \"./groovyWalk.json\";\n\nconst Example = () => {\n    return <Lottie animationData={groovyWalkAnimation} />;\n};\n\nexport default Example;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <h3 {...{\n      \"id\": \"animationdata\"\n    }}><inlineCode parentName=\"h3\">{`animationData`}</inlineCode></h3>\n    <p>{`A JSON Object with the exported animation data`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Type: Object\nDefault: none\nRequired: ☑\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"loop\"\n    }}><inlineCode parentName=\"h3\">{`loop`}</inlineCode></h3>\n    <p>{`Set it to true for infinite amount of loops, or pass a number for a specific amount of loops`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Type: Boolean | Number\nDefault: true\nRequired: ☐\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"autoplay\"\n    }}><inlineCode parentName=\"h3\">{`autoplay`}</inlineCode></h3>\n    <p>{`If set to true, animation will play as soon as it's loaded`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Type: Boolean\nDefault: true\nRequired: ☐\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"initialsegment\"\n    }}><inlineCode parentName=\"h3\">{`initialSegment`}</inlineCode></h3>\n    <p>{`Expects an array of length 2. First value is the initial frame, second value is the final frame. If this is set, the animation will start at this position in time instead of the exported value from AE`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Type: Array\nDefault: none\nRequired: ☐\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"oncomplete\"\n    }}><inlineCode parentName=\"h3\">{`onComplete`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"onloopcomplete\"\n    }}><inlineCode parentName=\"h3\">{`onLoopComplete`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"onenterframe\"\n    }}><inlineCode parentName=\"h3\">{`onEnterFrame`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"onsegmentstart\"\n    }}><inlineCode parentName=\"h3\">{`onSegmentStart`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"onconfigready\"\n    }}><inlineCode parentName=\"h3\">{`onConfigReady`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"ondataready\"\n    }}><inlineCode parentName=\"h3\">{`onDataReady`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"ondatafailed\"\n    }}><inlineCode parentName=\"h3\">{`onDataFailed`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"onloadedimages\"\n    }}><inlineCode parentName=\"h3\">{`onLoadedImages`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"ondomloaded\"\n    }}><inlineCode parentName=\"h3\">{`onDOMLoaded`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"ondestroy\"\n    }}><inlineCode parentName=\"h3\">{`onDestroy`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"style\"\n    }}><inlineCode parentName=\"h3\">{`style`}</inlineCode></h3>\n    <p>{`Style object that applies to the animation wrapper (which is a div)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Type: Object\nDefault: none\nRequired: ☐\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"ref\"\n    }}><inlineCode parentName=\"h3\">{`ref`}</inlineCode></h3>\n    <p>{`Expects a React ref object in which interaction methods will be stored`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Type: React.RefObject\nDefault: none\nRequired: ☐\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"interaction-methods\"\n    }}>{`Interaction methods`}</h2>\n    <p>{`These methods are designed to give you more control over the Lottie animation, and fill in the gaps left by the props:`}</p>\n    <h3 {...{\n      \"id\": \"play\"\n    }}><inlineCode parentName=\"h3\">{`play()`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"stop\"\n    }}><inlineCode parentName=\"h3\">{`stop()`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"pause\"\n    }}><inlineCode parentName=\"h3\">{`pause()`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"setspeedspeed\"\n    }}><inlineCode parentName=\"h3\">{`setSpeed(speed)`}</inlineCode></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`speed: 1 is normal speed\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"gotoandplayvalue-isframe\"\n    }}><inlineCode parentName=\"h3\">{`goToAndPlay(value, isFrame)`}</inlineCode></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`value: numeric value.\nisFrame: defines if first argument is a time based value or a frame based (default false).\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"gotoandstopvalue-isframe\"\n    }}><inlineCode parentName=\"h3\">{`goToAndStop(value, isFrame)`}</inlineCode></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`value: numeric value.\nisFrame: defines if first argument is a time based value or a frame based (default false).\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"setdirectiondirection\"\n    }}><inlineCode parentName=\"h3\">{`setDirection(direction)`}</inlineCode></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`direction: 1 is forward, -1 is reverse.\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"playsegmentssegments-forceflag\"\n    }}><inlineCode parentName=\"h3\">{`playSegments(segments, forceFlag)`}</inlineCode></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`segments: array. Can contain 2 numeric values that will be used as first and last frame of the animation. Or can contain a sequence of arrays each with 2 numeric values.\nforceFlag: boolean. If set to false, it will wait until the current segment is complete. If true, it will update values immediately.\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"setsubframeusesubframes\"\n    }}><inlineCode parentName=\"h3\">{`setSubframe(useSubFrames)`}</inlineCode></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`useSubFrames: If false, it will respect the original AE fps. If true, it will update on every requestAnimationFrame with intermediate values. Default is true.\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"destroy\"\n    }}><inlineCode parentName=\"h3\">{`destroy()`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"getdurationinframes\"\n    }}><inlineCode parentName=\"h3\">{`getDuration(inFrames)`}</inlineCode></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`inFrames: If true, returns duration in frames, if false, in seconds\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"calling-the-methods\"\n    }}>{`Calling the methods`}</h3>\n    <p>{`To use the interaction methods listed above, pass a reference object to the Lottie component by using the `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{` prop (see the React documentation to learn more about `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/refs-and-the-dom.html\"\n      }}>{`Ref`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-reference.html#useref\"\n      }}>{`useRef`}</a>{` hook):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import Lottie from \"lottie-react\";\nimport groovyWalkAnimation from \"./groovyWalk.json\";\n\nconst Example = () => {\n    const ref = useRef();\n\n    return <Lottie ref={ref} animationData={groovyWalkAnimation} />;\n};\n\nexport default Example;\n`}</code></pre>\n    <p>{`You can then use the interaction methods like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`...\nref.current.pause();\n...\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`Soon :)`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}